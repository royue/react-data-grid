/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as VariableRowHeightRouteImport } from './routes/VariableRowHeight'
import { Route as TreeViewRouteImport } from './routes/TreeView'
import { Route as ScrollToCellRouteImport } from './routes/ScrollToCell'
import { Route as RowsReorderingRouteImport } from './routes/RowsReordering'
import { Route as RowGroupingRouteImport } from './routes/RowGrouping'
import { Route as ResizableGridRouteImport } from './routes/ResizableGrid'
import { Route as NoRowsRouteImport } from './routes/NoRows'
import { Route as MillionCellsRouteImport } from './routes/MillionCells'
import { Route as MasterDetailRouteImport } from './routes/MasterDetail'
import { Route as InfiniteScrollingRouteImport } from './routes/InfiniteScrolling'
import { Route as HeaderFiltersRouteImport } from './routes/HeaderFilters'
import { Route as CustomizableRenderersRouteImport } from './routes/CustomizableRenderers'
import { Route as ContextMenuRouteImport } from './routes/ContextMenu'
import { Route as CommonFeaturesRouteImport } from './routes/CommonFeatures'
import { Route as ColumnsReorderingRouteImport } from './routes/ColumnsReordering'
import { Route as ColumnSpanningRouteImport } from './routes/ColumnSpanning'
import { Route as ColumnGroupingRouteImport } from './routes/ColumnGrouping'
import { Route as CellNavigationRouteImport } from './routes/CellNavigation'
import { Route as AnimationRouteImport } from './routes/Animation'
import { Route as AllFeaturesRouteImport } from './routes/AllFeatures'
import { Route as IndexRouteImport } from './routes/index'

const VariableRowHeightRoute = VariableRowHeightRouteImport.update({
  id: '/VariableRowHeight',
  path: '/VariableRowHeight',
  getParentRoute: () => rootRouteImport,
} as any)
const TreeViewRoute = TreeViewRouteImport.update({
  id: '/TreeView',
  path: '/TreeView',
  getParentRoute: () => rootRouteImport,
} as any)
const ScrollToCellRoute = ScrollToCellRouteImport.update({
  id: '/ScrollToCell',
  path: '/ScrollToCell',
  getParentRoute: () => rootRouteImport,
} as any)
const RowsReorderingRoute = RowsReorderingRouteImport.update({
  id: '/RowsReordering',
  path: '/RowsReordering',
  getParentRoute: () => rootRouteImport,
} as any)
const RowGroupingRoute = RowGroupingRouteImport.update({
  id: '/RowGrouping',
  path: '/RowGrouping',
  getParentRoute: () => rootRouteImport,
} as any)
const ResizableGridRoute = ResizableGridRouteImport.update({
  id: '/ResizableGrid',
  path: '/ResizableGrid',
  getParentRoute: () => rootRouteImport,
} as any)
const NoRowsRoute = NoRowsRouteImport.update({
  id: '/NoRows',
  path: '/NoRows',
  getParentRoute: () => rootRouteImport,
} as any)
const MillionCellsRoute = MillionCellsRouteImport.update({
  id: '/MillionCells',
  path: '/MillionCells',
  getParentRoute: () => rootRouteImport,
} as any)
const MasterDetailRoute = MasterDetailRouteImport.update({
  id: '/MasterDetail',
  path: '/MasterDetail',
  getParentRoute: () => rootRouteImport,
} as any)
const InfiniteScrollingRoute = InfiniteScrollingRouteImport.update({
  id: '/InfiniteScrolling',
  path: '/InfiniteScrolling',
  getParentRoute: () => rootRouteImport,
} as any)
const HeaderFiltersRoute = HeaderFiltersRouteImport.update({
  id: '/HeaderFilters',
  path: '/HeaderFilters',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomizableRenderersRoute = CustomizableRenderersRouteImport.update({
  id: '/CustomizableRenderers',
  path: '/CustomizableRenderers',
  getParentRoute: () => rootRouteImport,
} as any)
const ContextMenuRoute = ContextMenuRouteImport.update({
  id: '/ContextMenu',
  path: '/ContextMenu',
  getParentRoute: () => rootRouteImport,
} as any)
const CommonFeaturesRoute = CommonFeaturesRouteImport.update({
  id: '/CommonFeatures',
  path: '/CommonFeatures',
  getParentRoute: () => rootRouteImport,
} as any)
const ColumnsReorderingRoute = ColumnsReorderingRouteImport.update({
  id: '/ColumnsReordering',
  path: '/ColumnsReordering',
  getParentRoute: () => rootRouteImport,
} as any)
const ColumnSpanningRoute = ColumnSpanningRouteImport.update({
  id: '/ColumnSpanning',
  path: '/ColumnSpanning',
  getParentRoute: () => rootRouteImport,
} as any)
const ColumnGroupingRoute = ColumnGroupingRouteImport.update({
  id: '/ColumnGrouping',
  path: '/ColumnGrouping',
  getParentRoute: () => rootRouteImport,
} as any)
const CellNavigationRoute = CellNavigationRouteImport.update({
  id: '/CellNavigation',
  path: '/CellNavigation',
  getParentRoute: () => rootRouteImport,
} as any)
const AnimationRoute = AnimationRouteImport.update({
  id: '/Animation',
  path: '/Animation',
  getParentRoute: () => rootRouteImport,
} as any)
const AllFeaturesRoute = AllFeaturesRouteImport.update({
  id: '/AllFeatures',
  path: '/AllFeatures',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationRoute
  '/CellNavigation': typeof CellNavigationRoute
  '/ColumnGrouping': typeof ColumnGroupingRoute
  '/ColumnSpanning': typeof ColumnSpanningRoute
  '/ColumnsReordering': typeof ColumnsReorderingRoute
  '/CommonFeatures': typeof CommonFeaturesRoute
  '/ContextMenu': typeof ContextMenuRoute
  '/CustomizableRenderers': typeof CustomizableRenderersRoute
  '/HeaderFilters': typeof HeaderFiltersRoute
  '/InfiniteScrolling': typeof InfiniteScrollingRoute
  '/MasterDetail': typeof MasterDetailRoute
  '/MillionCells': typeof MillionCellsRoute
  '/NoRows': typeof NoRowsRoute
  '/ResizableGrid': typeof ResizableGridRoute
  '/RowGrouping': typeof RowGroupingRoute
  '/RowsReordering': typeof RowsReorderingRoute
  '/ScrollToCell': typeof ScrollToCellRoute
  '/TreeView': typeof TreeViewRoute
  '/VariableRowHeight': typeof VariableRowHeightRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationRoute
  '/CellNavigation': typeof CellNavigationRoute
  '/ColumnGrouping': typeof ColumnGroupingRoute
  '/ColumnSpanning': typeof ColumnSpanningRoute
  '/ColumnsReordering': typeof ColumnsReorderingRoute
  '/CommonFeatures': typeof CommonFeaturesRoute
  '/ContextMenu': typeof ContextMenuRoute
  '/CustomizableRenderers': typeof CustomizableRenderersRoute
  '/HeaderFilters': typeof HeaderFiltersRoute
  '/InfiniteScrolling': typeof InfiniteScrollingRoute
  '/MasterDetail': typeof MasterDetailRoute
  '/MillionCells': typeof MillionCellsRoute
  '/NoRows': typeof NoRowsRoute
  '/ResizableGrid': typeof ResizableGridRoute
  '/RowGrouping': typeof RowGroupingRoute
  '/RowsReordering': typeof RowsReorderingRoute
  '/ScrollToCell': typeof ScrollToCellRoute
  '/TreeView': typeof TreeViewRoute
  '/VariableRowHeight': typeof VariableRowHeightRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/AllFeatures': typeof AllFeaturesRoute
  '/Animation': typeof AnimationRoute
  '/CellNavigation': typeof CellNavigationRoute
  '/ColumnGrouping': typeof ColumnGroupingRoute
  '/ColumnSpanning': typeof ColumnSpanningRoute
  '/ColumnsReordering': typeof ColumnsReorderingRoute
  '/CommonFeatures': typeof CommonFeaturesRoute
  '/ContextMenu': typeof ContextMenuRoute
  '/CustomizableRenderers': typeof CustomizableRenderersRoute
  '/HeaderFilters': typeof HeaderFiltersRoute
  '/InfiniteScrolling': typeof InfiniteScrollingRoute
  '/MasterDetail': typeof MasterDetailRoute
  '/MillionCells': typeof MillionCellsRoute
  '/NoRows': typeof NoRowsRoute
  '/ResizableGrid': typeof ResizableGridRoute
  '/RowGrouping': typeof RowGroupingRoute
  '/RowsReordering': typeof RowsReorderingRoute
  '/ScrollToCell': typeof ScrollToCellRoute
  '/TreeView': typeof TreeViewRoute
  '/VariableRowHeight': typeof VariableRowHeightRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  id:
    | '__root__'
    | '/'
    | '/AllFeatures'
    | '/Animation'
    | '/CellNavigation'
    | '/ColumnGrouping'
    | '/ColumnSpanning'
    | '/ColumnsReordering'
    | '/CommonFeatures'
    | '/ContextMenu'
    | '/CustomizableRenderers'
    | '/HeaderFilters'
    | '/InfiniteScrolling'
    | '/MasterDetail'
    | '/MillionCells'
    | '/NoRows'
    | '/ResizableGrid'
    | '/RowGrouping'
    | '/RowsReordering'
    | '/ScrollToCell'
    | '/TreeView'
    | '/VariableRowHeight'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AllFeaturesRoute: typeof AllFeaturesRoute
  AnimationRoute: typeof AnimationRoute
  CellNavigationRoute: typeof CellNavigationRoute
  ColumnGroupingRoute: typeof ColumnGroupingRoute
  ColumnSpanningRoute: typeof ColumnSpanningRoute
  ColumnsReorderingRoute: typeof ColumnsReorderingRoute
  CommonFeaturesRoute: typeof CommonFeaturesRoute
  ContextMenuRoute: typeof ContextMenuRoute
  CustomizableRenderersRoute: typeof CustomizableRenderersRoute
  HeaderFiltersRoute: typeof HeaderFiltersRoute
  InfiniteScrollingRoute: typeof InfiniteScrollingRoute
  MasterDetailRoute: typeof MasterDetailRoute
  MillionCellsRoute: typeof MillionCellsRoute
  NoRowsRoute: typeof NoRowsRoute
  ResizableGridRoute: typeof ResizableGridRoute
  RowGroupingRoute: typeof RowGroupingRoute
  RowsReorderingRoute: typeof RowsReorderingRoute
  ScrollToCellRoute: typeof ScrollToCellRoute
  TreeViewRoute: typeof TreeViewRoute
  VariableRowHeightRoute: typeof VariableRowHeightRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/AllFeatures': {
      id: '/AllFeatures'
      path: '/AllFeatures'
      fullPath: '/AllFeatures'
      preLoaderRoute: typeof AllFeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Animation': {
      id: '/Animation'
      path: '/Animation'
      fullPath: '/Animation'
      preLoaderRoute: typeof AnimationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CellNavigation': {
      id: '/CellNavigation'
      path: '/CellNavigation'
      fullPath: '/CellNavigation'
      preLoaderRoute: typeof CellNavigationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ColumnGrouping': {
      id: '/ColumnGrouping'
      path: '/ColumnGrouping'
      fullPath: '/ColumnGrouping'
      preLoaderRoute: typeof ColumnGroupingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ColumnSpanning': {
      id: '/ColumnSpanning'
      path: '/ColumnSpanning'
      fullPath: '/ColumnSpanning'
      preLoaderRoute: typeof ColumnSpanningRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ColumnsReordering': {
      id: '/ColumnsReordering'
      path: '/ColumnsReordering'
      fullPath: '/ColumnsReordering'
      preLoaderRoute: typeof ColumnsReorderingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CommonFeatures': {
      id: '/CommonFeatures'
      path: '/CommonFeatures'
      fullPath: '/CommonFeatures'
      preLoaderRoute: typeof CommonFeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ContextMenu': {
      id: '/ContextMenu'
      path: '/ContextMenu'
      fullPath: '/ContextMenu'
      preLoaderRoute: typeof ContextMenuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CustomizableRenderers': {
      id: '/CustomizableRenderers'
      path: '/CustomizableRenderers'
      fullPath: '/CustomizableRenderers'
      preLoaderRoute: typeof CustomizableRenderersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/HeaderFilters': {
      id: '/HeaderFilters'
      path: '/HeaderFilters'
      fullPath: '/HeaderFilters'
      preLoaderRoute: typeof HeaderFiltersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/InfiniteScrolling': {
      id: '/InfiniteScrolling'
      path: '/InfiniteScrolling'
      fullPath: '/InfiniteScrolling'
      preLoaderRoute: typeof InfiniteScrollingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/MasterDetail': {
      id: '/MasterDetail'
      path: '/MasterDetail'
      fullPath: '/MasterDetail'
      preLoaderRoute: typeof MasterDetailRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/MillionCells': {
      id: '/MillionCells'
      path: '/MillionCells'
      fullPath: '/MillionCells'
      preLoaderRoute: typeof MillionCellsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/NoRows': {
      id: '/NoRows'
      path: '/NoRows'
      fullPath: '/NoRows'
      preLoaderRoute: typeof NoRowsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ResizableGrid': {
      id: '/ResizableGrid'
      path: '/ResizableGrid'
      fullPath: '/ResizableGrid'
      preLoaderRoute: typeof ResizableGridRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/RowGrouping': {
      id: '/RowGrouping'
      path: '/RowGrouping'
      fullPath: '/RowGrouping'
      preLoaderRoute: typeof RowGroupingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/RowsReordering': {
      id: '/RowsReordering'
      path: '/RowsReordering'
      fullPath: '/RowsReordering'
      preLoaderRoute: typeof RowsReorderingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ScrollToCell': {
      id: '/ScrollToCell'
      path: '/ScrollToCell'
      fullPath: '/ScrollToCell'
      preLoaderRoute: typeof ScrollToCellRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Tree': {
      id: '/Tree'
      path: ''
      fullPath: '/Tree'
      preLoaderRoute: unknown
      parentRoute: typeof rootRouteImport
    }
    '/TreeView': {
      id: '/TreeView'
      path: '/TreeView'
      fullPath: '/TreeView'
      preLoaderRoute: typeof TreeViewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/VariableRowHeight': {
      id: '/VariableRowHeight'
      path: '/VariableRowHeight'
      fullPath: '/VariableRowHeight'
      preLoaderRoute: typeof VariableRowHeightRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/AllFeatures' {
  const createFileRoute: CreateFileRoute<
    '/AllFeatures',
    FileRoutesByPath['/AllFeatures']['parentRoute'],
    FileRoutesByPath['/AllFeatures']['id'],
    FileRoutesByPath['/AllFeatures']['path'],
    FileRoutesByPath['/AllFeatures']['fullPath']
  >
}
declare module './routes/Animation' {
  const createFileRoute: CreateFileRoute<
    '/Animation',
    FileRoutesByPath['/Animation']['parentRoute'],
    FileRoutesByPath['/Animation']['id'],
    FileRoutesByPath['/Animation']['path'],
    FileRoutesByPath['/Animation']['fullPath']
  >
}
declare module './routes/CellNavigation' {
  const createFileRoute: CreateFileRoute<
    '/CellNavigation',
    FileRoutesByPath['/CellNavigation']['parentRoute'],
    FileRoutesByPath['/CellNavigation']['id'],
    FileRoutesByPath['/CellNavigation']['path'],
    FileRoutesByPath['/CellNavigation']['fullPath']
  >
}
declare module './routes/ColumnGrouping' {
  const createFileRoute: CreateFileRoute<
    '/ColumnGrouping',
    FileRoutesByPath['/ColumnGrouping']['parentRoute'],
    FileRoutesByPath['/ColumnGrouping']['id'],
    FileRoutesByPath['/ColumnGrouping']['path'],
    FileRoutesByPath['/ColumnGrouping']['fullPath']
  >
}
declare module './routes/ColumnSpanning' {
  const createFileRoute: CreateFileRoute<
    '/ColumnSpanning',
    FileRoutesByPath['/ColumnSpanning']['parentRoute'],
    FileRoutesByPath['/ColumnSpanning']['id'],
    FileRoutesByPath['/ColumnSpanning']['path'],
    FileRoutesByPath['/ColumnSpanning']['fullPath']
  >
}
declare module './routes/ColumnsReordering' {
  const createFileRoute: CreateFileRoute<
    '/ColumnsReordering',
    FileRoutesByPath['/ColumnsReordering']['parentRoute'],
    FileRoutesByPath['/ColumnsReordering']['id'],
    FileRoutesByPath['/ColumnsReordering']['path'],
    FileRoutesByPath['/ColumnsReordering']['fullPath']
  >
}
declare module './routes/CommonFeatures' {
  const createFileRoute: CreateFileRoute<
    '/CommonFeatures',
    FileRoutesByPath['/CommonFeatures']['parentRoute'],
    FileRoutesByPath['/CommonFeatures']['id'],
    FileRoutesByPath['/CommonFeatures']['path'],
    FileRoutesByPath['/CommonFeatures']['fullPath']
  >
}
declare module './routes/ContextMenu' {
  const createFileRoute: CreateFileRoute<
    '/ContextMenu',
    FileRoutesByPath['/ContextMenu']['parentRoute'],
    FileRoutesByPath['/ContextMenu']['id'],
    FileRoutesByPath['/ContextMenu']['path'],
    FileRoutesByPath['/ContextMenu']['fullPath']
  >
}
declare module './routes/CustomizableRenderers' {
  const createFileRoute: CreateFileRoute<
    '/CustomizableRenderers',
    FileRoutesByPath['/CustomizableRenderers']['parentRoute'],
    FileRoutesByPath['/CustomizableRenderers']['id'],
    FileRoutesByPath['/CustomizableRenderers']['path'],
    FileRoutesByPath['/CustomizableRenderers']['fullPath']
  >
}
declare module './routes/HeaderFilters' {
  const createFileRoute: CreateFileRoute<
    '/HeaderFilters',
    FileRoutesByPath['/HeaderFilters']['parentRoute'],
    FileRoutesByPath['/HeaderFilters']['id'],
    FileRoutesByPath['/HeaderFilters']['path'],
    FileRoutesByPath['/HeaderFilters']['fullPath']
  >
}
declare module './routes/InfiniteScrolling' {
  const createFileRoute: CreateFileRoute<
    '/InfiniteScrolling',
    FileRoutesByPath['/InfiniteScrolling']['parentRoute'],
    FileRoutesByPath['/InfiniteScrolling']['id'],
    FileRoutesByPath['/InfiniteScrolling']['path'],
    FileRoutesByPath['/InfiniteScrolling']['fullPath']
  >
}
declare module './routes/MasterDetail' {
  const createFileRoute: CreateFileRoute<
    '/MasterDetail',
    FileRoutesByPath['/MasterDetail']['parentRoute'],
    FileRoutesByPath['/MasterDetail']['id'],
    FileRoutesByPath['/MasterDetail']['path'],
    FileRoutesByPath['/MasterDetail']['fullPath']
  >
}
declare module './routes/MillionCells' {
  const createFileRoute: CreateFileRoute<
    '/MillionCells',
    FileRoutesByPath['/MillionCells']['parentRoute'],
    FileRoutesByPath['/MillionCells']['id'],
    FileRoutesByPath['/MillionCells']['path'],
    FileRoutesByPath['/MillionCells']['fullPath']
  >
}
declare module './routes/NoRows' {
  const createFileRoute: CreateFileRoute<
    '/NoRows',
    FileRoutesByPath['/NoRows']['parentRoute'],
    FileRoutesByPath['/NoRows']['id'],
    FileRoutesByPath['/NoRows']['path'],
    FileRoutesByPath['/NoRows']['fullPath']
  >
}
declare module './routes/ResizableGrid' {
  const createFileRoute: CreateFileRoute<
    '/ResizableGrid',
    FileRoutesByPath['/ResizableGrid']['parentRoute'],
    FileRoutesByPath['/ResizableGrid']['id'],
    FileRoutesByPath['/ResizableGrid']['path'],
    FileRoutesByPath['/ResizableGrid']['fullPath']
  >
}
declare module './routes/RowGrouping' {
  const createFileRoute: CreateFileRoute<
    '/RowGrouping',
    FileRoutesByPath['/RowGrouping']['parentRoute'],
    FileRoutesByPath['/RowGrouping']['id'],
    FileRoutesByPath['/RowGrouping']['path'],
    FileRoutesByPath['/RowGrouping']['fullPath']
  >
}
declare module './routes/RowsReordering' {
  const createFileRoute: CreateFileRoute<
    '/RowsReordering',
    FileRoutesByPath['/RowsReordering']['parentRoute'],
    FileRoutesByPath['/RowsReordering']['id'],
    FileRoutesByPath['/RowsReordering']['path'],
    FileRoutesByPath['/RowsReordering']['fullPath']
  >
}
declare module './routes/ScrollToCell' {
  const createFileRoute: CreateFileRoute<
    '/ScrollToCell',
    FileRoutesByPath['/ScrollToCell']['parentRoute'],
    FileRoutesByPath['/ScrollToCell']['id'],
    FileRoutesByPath['/ScrollToCell']['path'],
    FileRoutesByPath['/ScrollToCell']['fullPath']
  >
}
declare module './routes/Tree' {
  const createFileRoute: CreateFileRoute<
    '/Tree',
    FileRoutesByPath['/Tree']['parentRoute'],
    FileRoutesByPath['/Tree']['id'],
    FileRoutesByPath['/Tree']['path'],
    FileRoutesByPath['/Tree']['fullPath']
  >
}
declare module './routes/TreeView' {
  const createFileRoute: CreateFileRoute<
    '/TreeView',
    FileRoutesByPath['/TreeView']['parentRoute'],
    FileRoutesByPath['/TreeView']['id'],
    FileRoutesByPath['/TreeView']['path'],
    FileRoutesByPath['/TreeView']['fullPath']
  >
}
declare module './routes/VariableRowHeight' {
  const createFileRoute: CreateFileRoute<
    '/VariableRowHeight',
    FileRoutesByPath['/VariableRowHeight']['parentRoute'],
    FileRoutesByPath['/VariableRowHeight']['id'],
    FileRoutesByPath['/VariableRowHeight']['path'],
    FileRoutesByPath['/VariableRowHeight']['fullPath']
  >
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AllFeaturesRoute: AllFeaturesRoute,
  AnimationRoute: AnimationRoute,
  CellNavigationRoute: CellNavigationRoute,
  ColumnGroupingRoute: ColumnGroupingRoute,
  ColumnSpanningRoute: ColumnSpanningRoute,
  ColumnsReorderingRoute: ColumnsReorderingRoute,
  CommonFeaturesRoute: CommonFeaturesRoute,
  ContextMenuRoute: ContextMenuRoute,
  CustomizableRenderersRoute: CustomizableRenderersRoute,
  HeaderFiltersRoute: HeaderFiltersRoute,
  InfiniteScrollingRoute: InfiniteScrollingRoute,
  MasterDetailRoute: MasterDetailRoute,
  MillionCellsRoute: MillionCellsRoute,
  NoRowsRoute: NoRowsRoute,
  ResizableGridRoute: ResizableGridRoute,
  RowGroupingRoute: RowGroupingRoute,
  RowsReorderingRoute: RowsReorderingRoute,
  ScrollToCellRoute: ScrollToCellRoute,
  TreeViewRoute: TreeViewRoute,
  VariableRowHeightRoute: VariableRowHeightRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
